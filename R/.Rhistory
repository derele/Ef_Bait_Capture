                                    myDF[j,5] <- myDF[j,4]+100 # First piece is 100 long, close to 1 bait
                                    myDF[j,17] <- "0_to_100"
                                    myDF[j+1,4] <- myDF[j,5]+1 # 2nd piece is further from bait (100<d<300)
                                    myDF[j+1,5] <- myDF[j+1,4]+200
                                    myDF[j+1,17] <- "100_to_300"
                                    myDF[j+2,4] <- myDF[j+1,5]+1 #3rd piece is between 300 and 500 from bait
                                    mDF[j+2,17] <- "300_to_500"
                                    myDF[i,17] <- "To remove"
                                } else {
                                    j <- nrow(myDF)+1 # We fill at the end of the file
                                    myDF[j,] <- myDF[i,] # New lines are created to split the sequence
                                    myDF[j+1,] <- myDF[i,]
                                    myDF[j+2,] <- myDF[i,]
                                    myDF[j+3,] <- myDF[i,]
                                    myDF[j,5] <- myDF[j,4]+100 # First piece is 100 long, close to 1 bait
                                    myDF[j,17] <- "0_to_100"
                                    myDF[j+1,4] <- myDF[j,5]+1 # 2nd piece is further from bait (100<d<300)
                                    myDF[j+1,5] <- myDF[j+1,4]+200
                                    myDF[j+1,17] <- "100_to_300"
                                    myDF[j+2,4] <- myDF[j+1,5]+1 #3rd piece is between 300 and 500 from bait
                                    myDF[j+2,5] <- myDF[j+2,4]+200                                     
                                    mDF[j+2,17] <- "300_to_500"
                                    myDF[j+3,4] <- myDF[j+2,4]+1 # 4th piece is further away (more than 500)
                                    myDF[j+3,17] <- "more_than_500"
                                    myDF[i,17] <- "To remove"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
}
}
}
    }

myDF
tail(myDF)
head(myDF,50)
myDF
tail(myDF)
head(myDF,50)
head(myDF)
paste(myDF$V13, myDF$distance_to_bait, sep="_")
myDF
head(myDF)
tail(myDF)
tail(myDF)
myDF
tail(myDF,50)
headl(myDF,50)
head(myDF,50)
tail(myDF,70)
myDF
myDF
))))
}}}}}
}}}}}}}}}}}}
+     if (myDF$category[i]=="lonely") { # If the sequence is not on a contig with a bait, it's a "distant" sequence
        myDF$distance_to_bait[i] <- "distant"
    } else {
        if (myDF$category[i]=="BAIT") { # If the sequence is a bait, then... distance to bait is nulle
            myDF$distance_to_bait[i] <- "in_bait"
        } else {
            if (myDF$category[i]=="between") { # if the sequence is between 2 baits
                if (myDF$length[i]<=200) { # If the sequence is smaller than 200bp
                    myDF$distance_to_bait[i]<-"0_to_100" # Any base is distant to max 100bp to a bait
                } else {
                    if (myDF$length[i]<=600) { # If the sequence is smaller than 600bp, we cut it
                        j <- nrow(myDF)+1 # We fill at the end of the file
                        myDF[j,] <- myDF[i,] # New lines are created to split the sequence
                        myDF[j+1,] <- myDF[i,]
                        myDF[j+2,] <- myDF[i,]
                        myDF[j,5] <- myDF[j,4]+100 # First piece is 100 long, close to 1 bait
                        myDF[j,18] <- "0_to_100"
                        myDF$subcontig[j] <- 1
                        myDF[j+2,4] <- myDF[j+2,5]-100 # Last piece is 100 long, close to 1 bait
                        myDF[j+2,18] <- "0_to_100"
                        myDF$subcontig[j+2] <- 3
                        myDF[j+1,4] <- myDF[j,5]+1 # Last piece is further from bait (100<d<300)
                        myDF[j+1,5] <- myDF[j+2,4]-1
                        myDF[j+1,18] <- "100_to_300"
                        myDF$subcontig[j+1] <- 2
                        myDF[i,18] <- "To remove"
                    } else {
                        if (myDF$length[i]<=1000) { # If the sequence is smaller than 1000bp, we cut it
                            j <- nrow(myDF)+1 # We fill at the end of the file
                            myDF[j,] <- myDF[i,] # Init.
                            myDF[j+1,] <- myDF[i,]
                            myDF[j+2,] <- myDF[i,]
                            myDF[j+3,] <- myDF[i,]
                            myDF[j+4,] <- myDF[i,]
                            myDF[j,5] <- myDF[j,4]+100 # First piece is 100 long, close to 1 bait
                            myDF[j,18] <- "0_to_100"
                            myDF$subcontig[j] <- 1
                            myDF[j+4,4] <- myDF[j+4,5]-100 # Last piece is 100 long, close to 1 bait
                            myDF[j+4,18] <- "0_to_100"
                            myDF$subcontig[j+4] <- 5
                            myDF[j+1,4] <- myDF[j,5]+1
                            myDF[j+1,5] <- myDF[j+1,4]+200 # 2nd piece is 200 long, 100to300 from bait
                            myDF[j+1,18] <- "100_to_300"
                            myDF$subcontig[j+1] <- 2
                            myDF[j+3,5] <- myDF[j+4,4]-1
                            myDF[j+3,4] <- myDF[j+3,5]-200 # 4nd piece is 200 long, 100to300 from bait
                            myDF[j+3,18] <- "100_to_300"
                            myDF$subcontig[j+3] <- 4
                            myDF[j+2,4] <- myDF[j+1,5]+1
                            myDF[j+2,5] <- myDF[j+3,4]-1 # Middle piece is further away [300 to 500bp]
                            myDF[j+2,18] <- "300_to_500"
                            myDF$subcontig[j+2] <- 3
                            myDF[i,18] <- "To remove"
                        } else {
                            j <- nrow(myDF)+1 # We fill at the end of the file
                            myDF[j,] <- myDF[i,] # Init.
                            myDF[j+1,] <- myDF[i,]
                            myDF[j+2,] <- myDF[i,]
                            myDF[j+3,] <- myDF[i,]
                            myDF[j+4,] <- myDF[i,]
                            myDF[j+5,] <- myDF[i,]
                            myDF[j+6,] <- myDF[i,]
                            myDF[j,5] <- myDF[j,4]+100 # First piece is 100 long, close to 1 bait
                            myDF[j,18] <- "0_to_100"
                            myDF$subcontig[j] <- 1
                            myDF[j+6,4] <- myDF[j+6,5]-100 # Last piece is 100 long, close to 1 bait
                            myDF[j+6,18] <- "0_to_100"
                            myDF$subcontig[j+6] <- 7
                            myDF[j+1,4] <- myDF[j,5]+1
                            myDF[j+1,5] <- myDF[j+1,4]+200 # 2nd piece is 200 long, 100to300 from bait
                            myDF[j+1,18] <- "100_to_300"
                            myDF$subcontig[j+1] <- 2
                            myDF[j+5,5] <- myDF[j+6,4]-1
                            myDF[j+5,4] <- myDF[j+5,5]-200 # 6st piece is 200 long, 100to300 from bait
                            myDF[j+5,18] <- "100_to_300"
                            myDF$subcontig[j+5] <- 6
                            myDF[j+2,4] <- myDF[j+1,5]+1
                            myDF[j+2,5] <- myDF[j+2,4]+200 # 3rd piece is 200 long, 300to500 from bait
                            myDF[j+2,18] <- "300_to_500"
                            myDF$subcontig[j+2] <- 3
                            myDF[j+4,5] <- myDF[j+5,4]-1
                            myDF[j+4,4] <- myDF[j+4,5]-200 # 5th piece is 200 long, 300to500 from bait
                            myDF[j+4,18] <- "300_to_500"
                            myDF$subcontig[j+4] <-5 
                            myDF[j+3,4] <- myDF[j+2,5]+1 # Middle piece is further away [more than 500]
                            myDF[j+3,5] <- myDF[j+4,4]-1
                            myDF[j+3,18] <- "more_than_500"
                            myDF$subcontig[j+3] <- 4
                            myDF[i,18] <- "To remove"
                        }
                    }
                }
            } else {
                if (myDF$category[i]=="before") { # if the sequence is before a bait
                    if (myDF$length[i]<=100) { # If the sequence is smaller than 100bp
                        myDF$distance_to_bait[i]<-"0_to_100" # Any base is distant to max 100bp to a bait
                    } else {
                        if (myDF$length[i]<=300) { # If the sequence is smaller than 300bp, we cut it
                            j <- nrow(myDF)+1 # We fill at the end of the file
                            myDF[j,] <- myDF[i,] # New lines are created to split the sequence
                            myDF[j+1,] <- myDF[i,]
                            myDF[j,4] <- myDF[j,5]-100 # First piece is 100 long, close to 1 bait
                            myDF[j,18] <- "0_to_100"
                            myDF$subcontig[j] <- 2
                            myDF[j+1,5] <- myDF[j,4]-1 # Last piece is further from bait (100<d<300)
                            myDF[j+1,18] <- "100_to_300"
                            myDF$subcontig[j+1] <- 1
                            myDF[i,18] <- "To remove"
                        } else {
                            if (myDF$length[i]<=500) { # If the sequence is smaller than 500bp, we cut it
                                j <- nrow(myDF)+1 # We fill at the end of the file
                                myDF[j,] <- myDF[i,] # Init.
                                myDF[j+1,] <- myDF[i,]
                                myDF[j+2,] <- myDF[i,]
                                myDF[j,4] <- myDF[j,5]-100 # First piece is 100 long, close to 1 bait
                                myDF[j,18] <- "0_to_100"
                                myDF$subcontig[j] <- 3
                                myDF[j+1,5] <- myDF[j,4]-1 # 2nd piece is 200 long, 100to300 from bait
                                myDF[j+1,4] <- myDF[j+1,5]-200
                                myDF[j+1,18] <- "100_to_300"
                                myDF$subcontig[j+1] <- 2
                                myDF[j+2,5] <- myDF[j+1,4]-1 # 3rd piece is 200 long, further away [300 to 500bp]
                                myDF[j+2,18] <- "300_to_500"
                                myDF$subcontig[j+2] <- 1
                                myDF[i,18] <- "To remove"
                            } else {
                                j <- nrow(myDF)+1 # We fill at the end of the file
                                myDF[j,] <- myDF[i,] # Init.
                                myDF[j+1,] <- myDF[i,]
                                myDF[j+2,] <- myDF[i,]
                                myDF[j+3,] <- myDF[i,]
                                myDF[j,4] <- myDF[j,5]-100 # First piece is 100 long, close to 1 bait
                                myDF[j,18] <- "0_to_100"
                                myDF$subcontig[j] <- 4
                                myDF[j+1,5] <- myDF[j,4]-1 # 2nd piece is 200 long, 100to300 from bait
                                myDF[j+1,4] <- myDF[j+1,5]-200
                                myDF[j+1,18] <- "100_to_300"
                                myDF$subcontig[j+1] <- 3
                                myDF[j+2,5] <- myDF[j+1,4]-1 # 3rd piece is 200 long, further away [300 to 500bp]
                                myDF[j+2,4] <- myDF[j+2,5]-200
                                myDF[j+2,18] <- "300_to_500"
                                myDF$subcontig[j+2] <- 2
                                myDF[j+3,5] <- myDF[j+2,4]-1 # 4th piece is further than 500bp from bait
                                myDF[j+3,18] <- "more_than_500"
                                myDF$subcontig[j+3] <- 1
                                myDF[i,18] <- "To remove"
                            }
                        }
                    }
                } else {
                    if (myDF$category[i]=="after") { #if the sequence is after a bait
                        if (myDF$length[i]<=100) { # If the sequence is smaller than 100bp
                            myDF$distance_to_bait[i]<-"0_to_100" # Any base is distant to max 100bp to a bait
                        } else {
                            if (myDF$length[i]<=300) { # If the sequence is smaller than 300bp, we cut it
                                j <- nrow(myDF)+1 # We fill at the end of the file
                                myDF[j,] <- myDF[i,] # New lines are created to split the sequence
                                myDF[j+1,] <- myDF[i,]
                                myDF[j,5] <- myDF[j,4]+100 # First piece is 100 long, close to 1 bait
                                myDF[j,18] <- "0_to_100"
                                myDF$subcontig[j] <- 1
                                myDF[j+1,4] <- myDF[j,5]+1 # Last piece is further from bait (100<d<300)
                                myDF[j+1,18] <- "100_to_300"
                                myDF$subcontig[j+1] <- 2
                                myDF[i,18] <- "To remove"
                            } else {
                                if (myDF$length[i]<=500) { # If the sequence is smaller than 500bp, we cut it
                                    j <- nrow(myDF)+1 # We fill at the end of the file
                                    myDF[j,] <- myDF[i,] # New lines are created to split the sequence
                                    myDF[j+1,] <- myDF[i,]
                                    myDF[j+2,] <- myDF[i,]
                                    myDF[j,5] <- myDF[j,4]+100 # First piece is 100 long, close to 1 bait
                                    myDF[j,18] <- "0_to_100"
                                    myDF$subcontig[j] <- 1
                                    myDF[j+1,4] <- myDF[j,5]+1 # 2nd piece is further from bait (100<d<300)
                                    myDF[j+1,5] <- myDF[j+1,4]+200
                                    myDF[j+1,18] <- "100_to_300"
                                    myDF$subcontig[j+1] <- 2
                                    myDF[j+2,4] <- myDF[j+1,5]+1 #3rd piece is between 300 and 500 from bait
                                    myDF[j+2,18] <- "300_to_500"
                                    myDF$subcontig[j+2] <- 3
                                    myDF[i,18] <- "To remove"
                                } else {
                                    j <- nrow(myDF)+1 # We fill at the end of the file
                                    myDF[j,] <- myDF[i,] # New lines are created to split the sequence
                                    myDF[j+1,] <- myDF[i,]
                                    myDF[j+2,] <- myDF[i,]
                                    myDF[j+3,] <- myDF[i,]
                                    myDF[j,5] <- myDF[j,4]+100 # First piece is 100 long, close to 1 bait
                                    myDF[j,18] <- "0_to_100"
                                    myDF$subcontig[j] <- 1
                                    myDF[j+1,4] <- myDF[j,5]+1 # 2nd piece is further from bait (100<d<300)
                                    myDF[j+1,5] <- myDF[j+1,4]+200
                                    myDF[j+1,18] <- "100_to_300"
                                    myDF$subcontig[j+1] <- 2
                                    myDF[j+2,4] <- myDF[j+1,5]+1 #3rd piece is between 300 and 500 from bait
                                    myDF[j+2,5] <- myDF[j+2,4]+200                                     
                                    myDF[j+2,18] <- "300_to_500"
                                    myDF$subcontig[j+2] <- 3
                                    myDF[j+3,4] <- myDF[j+2,4]+1 # 4th piece is further away (more than 500)
                                    myDF[j+3,18] <- "more_than_500"
                                    myDF$subcontig[j+3] <- 4
                                    myDF[i,18] <- "To remove"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
myDFsave
head(myDFsave)
head(myDF)
tail(myDF)
nrow(myDF)
head(myDFfinal$LAST
)
nrow(myDF)
myDF[(4999,5050), ]
myDF[c(4999,5050), ]
myDF[(4999:5050), ]
myDF[(3999:4050), ]
tail(myDF)
myDF
tail(myDF)
essai
tail(essai)
most(myDF)
head(myD)
head(myDF)
head(myDF,50)
tail(myDF,50)
tail(myDF)
tail(myDF,50)
tail(myDFfinal)
head(essai)
essai[essai$V1=="EfaB_720",]
myDFfinal[myDFfinal$V1=="EfaB_720",]
head(essai[essai$V1=="EfaB_720",])
head(essai[essai$V1=="EfaB_720",], 50)
tail(head(essai[essai$V1=="EfaB_720",], 100))
tail(head(essai[essai$V1=="EfaB_720",], 90))
tail(head(essai[essai$V1=="EfaB_720",], 90),30)
tail(head(essai[essai$V1=="EfaB_720",], 95)
)
tail(head(essai[essai$V1=="EfaB_720",], 92)
)
myDF$length[myDF$V5-myDF$V4 < 0,]
M<-myDF[myDF$V5-myDF$V4 < 0,]
M$length
table(M$length)
head(mDF)
head(myDF)
myDF
head(myDF)
head(myDF)
tail(myDF)
myDFfinal
head(Mwide)
Mwide$Coverage.Apicoplast/Mwide$Coverage.Genome ON target
Mwide$Coverage.Apicoplast/Mwide$Coverage.Genome 
Mwide$Coverage.Apicoplast/Mwide[8]
head(Mwide)
Mwide[3:9]/Mwide[8]
Mwide[c(3:9)]/Mwide[8]
Mwide[3)]/Mwide[8]
Mwide[3]/Mwide[8]
Mwide
data
data
as.numeric(data[3])
Mwide
Mwide
M
M
M$value
round(M$value)
M
tail(M,50)
head(Mtot)
head(M)
head(M$variable)
tail(M$variable)
levels(factor(M$variable))
head(M_extranucl)
head(Tab)
head(M)
tail(M)
head(F1_R1$counts)
cc
fix.X11()
d
tail(head(a,228))
head(a)
head(a,10)
tail(head(a,10359))
d
tail(myDF)
mito
tail(rownames(df))
head(myDF)
head(myDF)
tail(myDF)
head(myDF,50)
head(myDF,50)
baitstot[c(nrow(baitstot),nrow(baitstot)-1),]
tail(baitstot)
nrow(mDF)
nrow(myDF)
nrow(myDF)
nrow(myDF)
nrow(myDF)
nrow(myDFfinal)
nrow(myDFfinal)
d
tail(myDFfinal)
tail(head(myDFfinal,59))
tail(head(myDFfinal,65),10)
tail(head(myDFfinal,67),10)
tail(head(myDFfinal,70),10)
data.table(head(myDFfinal$V13))
data.table(head(myDFfinal$V13,50))
data.table(head(myDFfinal$V13,55))
data.table(head(myDFfinal$V13,60))
dt
dt <- data.table(head(myDFfinal,60))
dt
head(myDFfinal)
tail(myDFfinal)
head(myDFfinal)
myDFfinal
head(myDFfinal)
names(myDFfinal)
help(pheatmap)
     # Create test matrix
     test = matrix(rnorm(200), 20, 10)
     test[1:10, seq(1, 10, 2)] = test[1:10, seq(1, 10, 2)] + 3
     test[11:20, seq(2, 10, 2)] = test[11:20, seq(2, 10, 2)] + 2
     test[15:20, seq(2, 10, 2)] = test[15:20, seq(2, 10, 2)] + 4
     colnames(test) = paste("Test", 1:10, sep = "")
     rownames(test) = paste("Gene", 1:20, sep = "")

test
head(test)
C1.1.OT
rownames(c1.1)
rownames(C1.1)
1
name
name
str(mybiglist)
length(MSL)
MSL
myTab
length(myTab[myTab>=length(MSL)-5])
length(myTab[myTab>=3])
BAITS
mysmalllist
str(mysmalllist)
myTab
str(myTab)
table(myTab)
str(mysmalllist)
BAITS
length(BAITS)
BAITS
length(BAITS)
cls(
)
head(MyDF)
head(MyDF)
cc
FilesR2crashed
gff.imputed


0
M
Mwide
M
Tab
Tab
Tab
Tab
Tab[-2]
Tab[-1]
Tab
Tab[,2]
grepl("mito", rownames(C1.1), ignore.case = T)
which(grepl("mito", rownames(C1.1), ignore.case = T))
which(grepl("apico", rownames(C1.1), ignore.case = T))
BaitsTot
length(BaitsTot)
X
head(X)
tail(X)
nrow(X)
nrow(X)
nrow(X)
nrow(X)
nrow(X)
tail(X)
head(X)
split(rownames(X),"_")
X
nrow(X)
strsplit(X, "_")
?strplit
?strplit
help(strplit)
X
nrow(X)
head(X)
tail(X)
head(X)
tail(X)
    if (isblat==TRUE) {

X
nrow(X)
union(X, essai)
head(X)
head(essai)
unlist(X)
class(X)
class(essai)
intersection(X,essai)
intersect(X,essai)
setdiff(X,essai)
X[235]
X[235,]
essai[265,]
fix.X11()
length(BaitsTot)
fix.X11()
a
a-3
1
